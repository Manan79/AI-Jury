from django.shortcuts import render, redirect
from django.contrib.auth.decorators import login_required
from django.contrib import messages
import requests
import json
from django.utils import timezone
from accounts.decorators import verified_required

#@verified_required
def lawyers_dashboard(request):
    return render(request, 'lawyers/dashboard.html')

#@verified_required
def legal_letters(request):
    template_type = request.GET.get('template', '')
    return render(request, 'lawyers/legal_letters.html', {'selected_template': template_type})

#@verified_required
def generate_legal_letter(request):
    if request.method == 'POST':
        letter_type = request.POST.get('letter_type')
        case_details = request.POST.get('case_details')
        recipient_info = request.POST.get('recipient_info')
        additional_instructions = request.POST.get('additional_instructions')
        
        # REUSE EXISTING CHAT RAG BRAIN
        rag_prompt = f"""
        Generate a professional legal {letter_type.replace('_', ' ')} with the following details:
        
        RECIPIENT: {recipient_info}
        CASE DETAILS: {case_details}
        ADDITIONAL INSTRUCTIONS: {additional_instructions}
        
        Format this as a formal legal document with proper structure, headings, and legal language.
        Include appropriate legal terminology and standard clauses for this type of document.
        Make it ready to use by a legal professional.
        """
        
        try:
            # CALL THE SAME RAG ENDPOINT YOUR CHATBOT USES
            response = requests.post(
                'YOUR_EXISTING_RAG_CHAT_ENDPOINT',  # Same as your chatbot
                json={
                    'message': rag_prompt,
                    'context': 'legal_document_generation'  # Optional context flag
                },
                headers={'Content-Type': 'application/json'},
                timeout=30
            )
            
            if response.status_code == 200:
                # Extract content from your existing RAG response format
                rag_response = response.json()
                generated_content = rag_response.get('response', rag_response.get('answer', rag_response.get('content', '')))
                
                if generated_content:
                    # Ensure it's properly formatted as a letter
                    generated_content = format_as_legal_letter(generated_content, letter_type, recipient_info)
                else:
                    generated_content = generate_fallback_letter(letter_type, case_details, recipient_info, additional_instructions)
                    
            else:
                generated_content = generate_fallback_letter(letter_type, case_details, recipient_info, additional_instructions)
                messages.warning(request, 'RAG service returned an error. Using template generation.')
                
        except Exception as e:
            print(f"RAG Connection Error: {e}")
            generated_content = generate_fallback_letter(letter_type, case_details, recipient_info, additional_instructions)
            messages.warning(request, 'Cannot connect to AI service. Using template generation.')
        
        return render(request, 'lawyers/generated_letter.html', {
            'generated_content': generated_content,
            'letter_type': letter_type,
            'form_data': request.POST
        })
    
    return redirect('legal_letters')

#@verified_required
def document_templates(request):
    templates = [
        {'name': 'Demand Letter', 'icon': 'üìÑ', 'category': 'Civil'},
        {'name': 'Cease and Desist', 'icon': '‚öñÔ∏è', 'category': 'Intellectual Property'},
        {'name': 'Contract Draft', 'icon': 'üìù', 'category': 'Contracts'},
        {'name': 'Legal Notice', 'icon': 'üì¢', 'category': 'General'},
        {'name': 'Settlement Agreement', 'icon': 'ü§ù', 'category': 'Civil'},
        {'name': 'Power of Attorney', 'icon': 'üîê', 'category': 'Estate'},
    ]
    return render(request, 'lawyers/document_templates.html', {'templates': templates})

def format_as_legal_letter(content, letter_type, recipient_info):
    """Format RAG response as a proper legal letter"""
    letter_title = letter_type.replace('_', ' ').title()
    
    formatted_letter = f"""
{letter_title}

Date: {timezone.now().strftime('%B %d, %Y')}

TO: {recipient_info}

{content}

---
Generated by AI Jury Legal Assistant
This document should be reviewed by qualified legal counsel before use.
"""
    return formatted_letter.strip()

def generate_fallback_letter(letter_type, case_details, recipient_info, additional_instructions):
    """Simple fallback when RAG is unavailable"""
    return f"""
{letter_type.replace('_', ' ').title()}

Date: {timezone.now().strftime('%B %d, %Y')}

TO: {recipient_info}

SUBJECT: Legal Matter Requiring Attention

Based on the information provided:

{case_details}

Additional Instructions: {additional_instructions}

[This is a template-generated letter. Connect to RAG service for AI-powered legal document generation.]

Sincerely,

[Your Law Firm Name]
"""